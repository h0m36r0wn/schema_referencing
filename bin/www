#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('schema:server');
var http = require('http');
var mongoose = require('mongoose');
var db = mongoose.connect('mongodb://localhost/team_db');
var conn = mongoose.connection;
mongoose.Promise = global.Promise;
var Teams = require('../controllers/Teams');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
app.io.attach(server);

conn.on('error', console.error.bind(console, 'connection err'));
conn.on('open',function(){
  server.listen(port, function(){
    console.log('Server is up and running');
    app.io.on('connection',function(client){
      console.log('client connected');
      client.on('createTeam',function(teamInfo){
          var team = new Teams();
          team.team_name = teamInfo.team_name;
          team.team_members = teamInfo.team_members;
          team.createTeam().then(function(){
            app.io.emit('createSuccess',teamInfo.team_name+' successfully created!!');
          },function(err){
            app.io.emit('errorCreating','Error happened while creating team: '+teamInfo.team_name);
          })
      })

      client.on('searchTeam',function(teamName, callback){
        var team = new Teams();
        team.team_name = teamName;
        team.searchTeam().then(function(result){
          callback(null,result);
        })
      })
    })
  });
  server.on('error', onError);
  server.on('listening', onListening);
})

/**
 * Listen on provided port, on all network interfaces.
 */



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
